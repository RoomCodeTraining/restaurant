name: 'Gestion des cartes'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/cards
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retourne la liste des cartes RFID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"errors":[{"status":401,"title":"Unauthenticated!","detail":"Unauthenticated."}]}'
        headers:
          content-type: application/problem+json
          cache-control: 'no-cache, private'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/cards/{identifier}'
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Afficher les informations d'une carte RFID"
      description: "Cette endpoint permet d'afficher les informations d'une carte RFID"
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      identifier:
        name: identifier
        description: ''
        required: true
        example: CARD000
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      identifier: CARD000
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"errors":[{"status":401,"title":"Unauthenticated!","detail":"Unauthenticated."}]}'
        headers:
          content-type: application/problem+json
          cache-control: 'no-cache, private'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/cards/current/assign
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Assignation de Carte primaire'
      description: "Cette endpoint permet d'assigner une carte primaire(Carte courante) à un utilisateur"
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: ''
        required: true
        example: tempore
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      identifier:
        name: identifier
        description: 'Le texte ne peut contenir plus de 255 caractères.'
        required: true
        example: ozyepaufdbk
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      quota_breakfast:
        name: quota_breakfast
        description: 'La valeur doit être supérieure ou égale à 0. La valeur ne peut être supérieure à 25.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      quota_lunch:
        name: quota_lunch
        description: 'La valeur doit être supérieure ou égale à 0. La valeur ne peut être supérieure à 25.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      payment_method_id:
        name: payment_method_id
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: tempore
      identifier: ozyepaufdbk
      quota_breakfast: 17
      quota_lunch: 3
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/cards/temporary/assign
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Assigner une carte temporaire'
      description: "Cette endpoint permet d'assigner une carte temporaire à un utilisateur"
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: ''
        required: true
        example: veniam
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      access_card_identifier:
        name: access_card_identifier
        description: 'Le texte ne peut contenir plus de 255 caractères.'
        required: true
        example: lcfuzroszogwrokec
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      expires_at:
        name: expires_at
        description: "Ce n'est pas une date valide. La date doit être postérieure ou égale au <code>today</code>."
        required: true
        example: '2118-11-02'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: veniam
      access_card_identifier: lcfuzroszogwrokec
      expires_at: '2118-11-02'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/reload/cards
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Recharger une carte RFID'
      description: 'Cette endpoint permet de recharger une carte RFID'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      access_card_identifier:
        name: access_card_identifier
        description: ''
        required: true
        example: itaque
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      quota_type:
        name: quota_type
        description: ''
        required: true
        example: quota_breakfast
        type: string
        enumValues:
          - quota_lunch
          - quota_breakfast
        exampleWasSpecified: false
        custom: []
      quota:
        name: quota
        description: 'La valeur doit être supérieure ou égale à 0. La valeur ne peut être supérieure à 25.'
        required: true
        example: 25
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      access_card_identifier: itaque
      quota_type: quota_breakfast
      quota: 25
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/cards/current
    metadata:
      groupName: 'Gestion des cartes'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Recuperer de la carte courante de l'utilisateur"
      description: "Cette endpoint permet de recuperer la carte courante d'un utilisateur"
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      identifier:
        name: identifier
        description: ''
        required: true
        example: tenetur
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      identifier: tenetur
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
